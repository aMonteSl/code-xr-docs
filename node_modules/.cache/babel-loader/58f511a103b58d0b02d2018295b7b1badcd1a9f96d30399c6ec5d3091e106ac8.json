{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useCopyToClipboard = (options = {}) => {\n  _s();\n  const {\n    successDuration = 2000,\n    // Duración del estado \"copiado\"\n    onSuccess = null,\n    onError = null\n  } = options;\n  const [isCopied, setIsCopied] = useState(false);\n  const [error, setError] = useState(null);\n  const copyToClipboard = useCallback(async text => {\n    if (!text) {\n      const errorMsg = 'No text provided to copy';\n      setError(errorMsg);\n      if (onError) onError(errorMsg);\n      return false;\n    }\n    try {\n      // Método moderno usando navigator.clipboard\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(text);\n      } else {\n        // Fallback para navegadores más antiguos\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        const successful = document.execCommand('copy');\n        document.body.removeChild(textArea);\n        if (!successful) {\n          throw new Error('Fallback copy failed');\n        }\n      }\n\n      // Estado de éxito\n      setIsCopied(true);\n      setError(null);\n      if (onSuccess) onSuccess(text);\n\n      // Resetear después del tiempo especificado\n      setTimeout(() => {\n        setIsCopied(false);\n      }, successDuration);\n      return true;\n    } catch (err) {\n      const errorMsg = `Failed to copy: ${err.message}`;\n      setError(errorMsg);\n      setIsCopied(false);\n      if (onError) onError(errorMsg);\n      console.error('Copy to clipboard failed:', err);\n      return false;\n    }\n  }, [successDuration, onSuccess, onError]);\n\n  // Función para resetear estados manualmente\n  const reset = useCallback(() => {\n    setIsCopied(false);\n    setError(null);\n  }, []);\n\n  // Función para copiar texto de un elemento DOM\n  const copyElementText = useCallback(async element => {\n    if (!element) return false;\n    const text = element.textContent || element.innerText || '';\n    return await copyToClipboard(text);\n  }, [copyToClipboard]);\n  return {\n    isCopied,\n    error,\n    copyToClipboard,\n    copyElementText,\n    reset,\n    isSupported: !!(navigator.clipboard || document.execCommand)\n  };\n};\n_s(useCopyToClipboard, \"HzNbyvgX3ni4/pMYfx+yhMY6HDc=\");","map":{"version":3,"names":["useState","useCallback","useCopyToClipboard","options","_s","successDuration","onSuccess","onError","isCopied","setIsCopied","error","setError","copyToClipboard","text","errorMsg","navigator","clipboard","window","isSecureContext","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","successful","execCommand","removeChild","Error","setTimeout","err","message","console","reset","copyElementText","element","textContent","innerText","isSupported"],"sources":["/home/adrian/web_code_xr/src/hooks/useCopyToClipboard.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\nexport const useCopyToClipboard = (options = {}) => {\n  const {\n    successDuration = 2000, // Duración del estado \"copiado\"\n    onSuccess = null,\n    onError = null\n  } = options;\n\n  const [isCopied, setIsCopied] = useState(false);\n  const [error, setError] = useState(null);\n\n  const copyToClipboard = useCallback(async (text) => {\n    if (!text) {\n      const errorMsg = 'No text provided to copy';\n      setError(errorMsg);\n      if (onError) onError(errorMsg);\n      return false;\n    }\n\n    try {\n      // Método moderno usando navigator.clipboard\n      if (navigator.clipboard && window.isSecureContext) {\n        await navigator.clipboard.writeText(text);\n      } else {\n        // Fallback para navegadores más antiguos\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        \n        const successful = document.execCommand('copy');\n        document.body.removeChild(textArea);\n        \n        if (!successful) {\n          throw new Error('Fallback copy failed');\n        }\n      }\n\n      // Estado de éxito\n      setIsCopied(true);\n      setError(null);\n      \n      if (onSuccess) onSuccess(text);\n\n      // Resetear después del tiempo especificado\n      setTimeout(() => {\n        setIsCopied(false);\n      }, successDuration);\n\n      return true;\n\n    } catch (err) {\n      const errorMsg = `Failed to copy: ${err.message}`;\n      setError(errorMsg);\n      setIsCopied(false);\n      \n      if (onError) onError(errorMsg);\n      \n      console.error('Copy to clipboard failed:', err);\n      return false;\n    }\n  }, [successDuration, onSuccess, onError]);\n\n  // Función para resetear estados manualmente\n  const reset = useCallback(() => {\n    setIsCopied(false);\n    setError(null);\n  }, []);\n\n  // Función para copiar texto de un elemento DOM\n  const copyElementText = useCallback(async (element) => {\n    if (!element) return false;\n    \n    const text = element.textContent || element.innerText || '';\n    return await copyToClipboard(text);\n  }, [copyToClipboard]);\n\n  return {\n    isCopied,\n    error,\n    copyToClipboard,\n    copyElementText,\n    reset,\n    isSupported: !!(navigator.clipboard || document.execCommand)\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}